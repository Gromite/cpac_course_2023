/* autogenerated by Processing revision 1293 on 2023-09-29 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Seek extends PApplet {



Vehicle v;

public void setup() {
  /* size commented out by preprocessor */;
  v = new Vehicle(width/2, height/2);
  /* smooth commented out by preprocessor */;
}

public void draw() {
  if (mousePressed) {

    background(255);

    PVector mouse = new PVector(mouseX, mouseY);

    // Draw an ellipse at the mouse location
    fill(200);
    stroke(0);
    strokeWeight(2);
    ellipse(mouse.x, mouse.y, 48, 48);

    // Call the appropriate steering behaviors for our agents
    v.seek(mouse);
    v.run();
  }
}

// The "Vehicle" class

class Vehicle {

  PVector location;
  PVector velocity;
  PVector acceleration;
  float r;
  float mass;
  float maxforce;    // Maximum steering force
  float maxspeed;    // Maximum speed

  Vehicle(float x, float y) {
    acceleration = new PVector(0,0);
    velocity = new PVector(0,-2);
    location = new PVector(x,y);
    r = 6;
    mass = 1;
    maxspeed = 4;
    maxforce = 0.1f;
  }
  
  public void run(){
    update();
    render();
  }

  // Method to update location
  public void update() {
    // Update velocity
    velocity.add(acceleration);
    // Limit speed
    velocity.limit(maxspeed);
    location.add(velocity);
    // Reset accelerationelertion to 0 each cycle
    acceleration.mult(0);
  }

  public void applyForce(PVector force) {
    PVector f = PVector.div(force,mass);  // Force/Mass
    acceleration.add(f);
  }

  // A method that calculates a steering force towards a target
  // STEER = DESIRED - VELOCITY
  public void seek(PVector target) {
    PVector desired = PVector.sub(target,location);  // A vector pointing from the location to the target
    
    // Normalize desired and scale to maximum speed
    desired.normalize();
    desired.mult(maxspeed);
    
    // Steering = Desired - velocity
    PVector steer = PVector.sub(desired,velocity);
    steer.limit(maxforce);  // Limit to maximum steering force
    
    applyForce(steer);
  }
    
    
  public void render() {
    // Draw a triangle rotated in the direction of velocity
    float theta = velocity.heading2D() + PI/2;
    fill(127);
    stroke(0);
    strokeWeight(1);
    pushMatrix();
    translate(location.x,location.y);
    rotate(theta);
    beginShape();
    vertex(0, -r*2);
    vertex(-r, r*2);
    vertex(r, r*2);
    endShape(CLOSE);
    popMatrix();
  }
}


  public void settings() { size(800, 200);
smooth(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Seek" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
