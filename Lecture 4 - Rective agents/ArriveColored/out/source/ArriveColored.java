/* autogenerated by Processing revision 1293 on 2023-09-29 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class ArriveColored extends PApplet {



Vehicle v,v1,v2,v3,v4;


public void setup() {
  //size(800, 200);
  /* size commented out by preprocessor */;
  v = new Vehicle(width/2, height/2);
  v1 = new Vehicle(0, 0);
  v2 = new Vehicle(200, 200);
  v3 = new Vehicle(200, 200);
  v4 = new Vehicle(200, 200);
  /* smooth commented out by preprocessor */;
}

public void draw() {
  if (mousePressed) {
    background(255);

    PVector mouse = new PVector(mouseX, mouseY);

    // Draw an ellipse at the mouse location
    fill(200);
    stroke(0);
    strokeWeight(2);
    ellipse(mouse.x, mouse.y, 48, 48);

    // Call the appropriate steering behaviors for our agents
    v.arrive(mouse);
    v.run();
    v1.arrive(mouse);
    v1.run();
    v2.arrive(mouse);
    v2.run();
    v3.arrive(mouse);
    v3.run();
    v4.arrive(mouse);
    v4.run();
    
  }
}

// The "Vehicle" class

class Vehicle {
  
  ArrayList<PVector> history = new ArrayList<PVector>();

  PVector location;
  PVector velocity;
  PVector acceleration;
  float r;
  float mass;
  float maxforce;    // Maximum steering force
  float maxspeed;    // Maximum speed
  
  float d;
  float c1 = random(0, 255);
  float c2 = random(0, 255);
  float c3 = random(0, 255);
  int col = color(c1,c2,c3,200); 


  Vehicle(float x, float y) {
    acceleration = new PVector(0,0);
    velocity = new PVector(0,0);
    location = new PVector(x,y);
    r = 6;
    mass=1;
    maxspeed = 4;
    maxforce = 0.1f;
  }

  
  public void applyForce(PVector force) {
    PVector f = PVector.div(force,mass);  // Force/Mass
    acceleration.add(f);
  }

  // A method that calculates a steering force towards a target
  // STEER = DESIRED MINUS VELOCITY
  public void arrive(PVector target) {
    PVector desired = PVector.sub(target,location);  // A vector pointing from the location to the target
    //float d = desired.mag();
    d = desired.mag();
    // Normalize desired and scale with arbitrary damping within 100 pixels
    desired.normalize();
    if (d < 100) {
      float m = map(d,0,100,0,maxspeed);
      desired.mult(m);
    } else {
      desired.mult(maxspeed);
    }

    // Steering = Desired minus Velocity
    PVector steer = PVector.sub(desired,velocity);
    steer.limit(maxforce);  // Limit to maximum steering force
    applyForce(steer);
  }
  
  public void run(){
    update();
    render();
  }
  
  // Method to update location
  public void update() {
    velocity.add(acceleration);
    velocity.limit(maxspeed);
    location.add(velocity);
    acceleration.mult(0);
    c1 = random(0, 255);
    c2 = random(0, 255);
    c3 = random(0, 255);
    col = color(c1,c2,c3,200); 
    history.add(location.get());
    if (history.size() > 1000) {
      history.remove(0);
    }
  }
  
  public void render() {
    
    beginShape();
    stroke(0);
    strokeWeight(1);
    //noFill();
    float c = map(d,0,width,0.2f,1);  // d = distance to the target
                                                      
    fill(c1*c,c2*c,c3*c,200);
    for(PVector v: history) {
      vertex(v.x,v.y);
    }
    endShape();
    
    // Draw a triangle rotated in the direction of velocity
    float theta = velocity.heading2D() + PI/2;
    fill(127);
    stroke(0);
    strokeWeight(1);
    pushMatrix();
    translate(location.x,location.y);
    rotate(theta);
    beginShape();
    vertex(0, -r*2);
    vertex(-r, r*2);
    vertex(r, r*2);
    endShape(CLOSE);
    popMatrix();
    
    
  }
}


  public void settings() { fullScreen();
smooth(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "ArriveColored" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
